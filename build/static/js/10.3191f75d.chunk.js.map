{"version":3,"sources":["components/Widget.js","../../../../../src/.internal/themes/animated.ts","components/SummaryXYChart.js","components/SummaryWidgets.js"],"names":["Widget","xl","md","mb","label","value","title","icon","Fragment","className","object","transitionDuration","rangeChangeDuration","interpolationDuration","sequencedInterpolation","defaultState","hiddenState","animationDuration","properties","opacity","showOnInit","am4core","am4themes_animated","SummaryXYChart","globalSummary","useEffect","chart","am4charts","colors","step","legend","position","paddingBottom","labels","template","maxWidth","xAxis","xAxes","push","createSeries","name","series","dataFields","valueY","categoryX","events","on","arrangeColumns","bullet","bullets","interactionsEnabled","dy","text","fill","getIndex","w","renderer","cellStartLocation","cellEndLocation","dataItems","length","x0","getX","delta","middle","newIndex","each","isHidden","isHiding","dummyData","indexOf","newMiddle","trueIndex","dx","animate","property","to","interpolationEasing","bulletsContainer","category","grid","location","yAxes","min","data","first","TotalConfirmed","second","TotalRecovered","third","TotalDeaths","id","SummaryWidgets","lg","useState","setGobalSummary","a","axios","get","Global","getData","NewConfirmed","NewRecovered","NewDeaths","style","height"],"mappings":"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","file":"static/js/10.3191f75d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Widget = ({xl, md, mb, label, value, title, icon}) => {\n    return (\n        <React.Fragment>\n        {/* Content Row */}\n            {/* Earnings (Monthly) Card Example */}\n            <div className={`col-xl-${xl} col-md-${md} mb-${mb}`}>\n              <div className={`card border-left-${label} shadow h-100 py-2`}>\n                <div className=\"card-body\">\n                  <div className=\"row no-gutters align-items-center\">\n                    <div className=\"col mr-2\">\n                      <div className={`text-xs font-weight-bold text-${label} text-uppercase mb-1`}>{title}</div>\n                      <div className=\"h5 mb-0 font-weight-bold text-gray-800\">{value}</div>\n                    </div>\n                    <div className=\"col-auto\">\n                      <i className={`${icon} fa-2x text-gray-300`}></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          {/* Content Row */}\n        </React.Fragment>\n\n    );\n}\n\nexport default Widget;","import { ITheme } from \"./ITheme\";\r\nimport { is } from \"../core/Registry\";\r\nimport { SpriteState } from \"../core/SpriteState\";\r\nimport { Component } from \"../core/Component\";\r\nimport { BaseObject } from \"../core/Base\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\nimport { Tooltip } from \"../core/elements/Tooltip\";\r\nimport { Series } from \"../charts/series/Series\";\r\nimport { PercentSeries } from \"../charts/series/PercentSeries\";\r\nimport { SankeyDiagram } from \"../charts/types/SankeyDiagram\";\r\nimport { FunnelSeries } from \"../charts/series/FunnelSeries\";\r\nimport { MapSeries } from \"../charts/map/MapSeries\";\r\nimport { FunnelSlice } from \"../charts/elements/FunnelSlice\";\r\nimport { Column } from \"../charts/elements/Column\";\r\nimport { Column3D } from \"../charts/elements/Column3D\";\r\nimport { Slice } from \"../core/elements/Slice\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { Chart } from \"../charts/Chart\";\r\n\r\n\r\n\r\nconst theme: ITheme = (object: BaseObject) => {\r\n\tif (is<SpriteState<any, any>>(object, \"SpriteState\")) {\r\n\t\tobject.transitionDuration = 400;\r\n\t}\r\n\r\n\tif (is<Component>(object, \"Component\")) {\r\n\t\tobject.rangeChangeDuration = 500;\r\n\t\tobject.interpolationDuration = 500;\r\n\t\tobject.sequencedInterpolation = false;\r\n\r\n\t\tif (is<SankeyDiagram>(object, \"SankeyDiagram\")) {\r\n\t\t\tobject.sequencedInterpolation = true;\r\n\t\t}\r\n\r\n\t\tif (is<FunnelSeries>(object, \"FunnelSeries\")) {\r\n\t\t\tobject.sequencedInterpolation = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (is<Chart>(object, \"Chart\")) {\r\n\t\tobject.defaultState.transitionDuration = 2000;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t}\r\n\r\n\tif (is<Tooltip>(object, \"Tooltip\")) {\r\n\t\tobject.animationDuration = 400;\r\n\t\tobject.defaultState.transitionDuration = 400;\r\n\t\tobject.hiddenState.transitionDuration = 400;\r\n\t}\r\n\r\n\tif (is<Scrollbar>(object, \"Scrollbar\")) {\r\n\t\tobject.animationDuration = 500;\r\n\t}\r\n\r\n\tif (is<Series>(object, \"Series\")) {\r\n\t\tobject.defaultState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.transitionDuration = 700;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t\tobject.showOnInit = true;\r\n\t}\r\n\r\n\tif (is<MapSeries>(object, \"MapSeries\")) {\r\n\t\tobject.hiddenState.properties.opacity = 0;\r\n\t}\r\n\r\n\tif (is<PercentSeries>(object, \"PercentSeries\")) {\r\n\t\tobject.hiddenState.properties.opacity = 0;\r\n\t}\r\n\r\n\tif (is<FunnelSlice>(object, \"FunnelSlice\")) {\r\n\t\tobject.defaultState.transitionDuration = 800;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\tif (is<Slice>(object, \"Slice\")) {\r\n\t\tobject.defaultState.transitionDuration = 700;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\tif (is<Preloader>(object, \"Preloader\")) {\r\n\t\tobject.hiddenState.transitionDuration = 2000;\r\n\t}\r\n\r\n\tif (is<Column>(object, \"Column\")) {\r\n\t\tobject.defaultState.transitionDuration = 700;\r\n\t\tobject.hiddenState.transitionDuration = 1000;\r\n\t\tobject.hiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\tif (is<Column3D>(object, \"Column3D\")) {\r\n\t\tobject.hiddenState.properties.opacity = 0;\r\n\t}\r\n};\r\n\r\nexport default theme;\r\n","import React, {useEffect} from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nconst SummaryXYChart = ({xl, md, mb, globalSummary}) => {\n\n    useEffect(() => { \n        \n        const chart = am4core.create('summary-chart-div', am4charts.XYChart);\n\n            chart.colors.step = 2;\n            \n            chart.legend = new am4charts.Legend()\n            chart.legend.position = 'top'\n            chart.legend.paddingBottom = 20\n            chart.legend.labels.template.maxWidth = 95\n\n            let xAxis = chart.xAxes.push(new am4charts.CategoryAxis())\n            xAxis.dataFields.category = 'category'\n            xAxis.renderer.cellStartLocation = 0.1\n            xAxis.renderer.cellEndLocation = 0.9\n            xAxis.renderer.grid.template.location = 0;\n\n            let yAxis = chart.yAxes.push(new am4charts.ValueAxis());\n            yAxis.min = 0;\n\n            function createSeries(value, name) {\n                let series = chart.series.push(new am4charts.ColumnSeries())\n                series.dataFields.valueY = value\n                series.dataFields.categoryX = 'category'\n                series.name = name\n\n                series.events.on(\"hidden\", arrangeColumns);\n                series.events.on(\"shown\", arrangeColumns);\n\n                let bullet = series.bullets.push(new am4charts.LabelBullet())\n                bullet.interactionsEnabled = false\n                bullet.dy = 60;\n                bullet.label.text = '{valueY}'\n                bullet.label.fill = am4core.color('black')\n                bullet.label.dy = -70;\n\n                return series;\n            }\n\n            // filling the charts data from the globalSummary data\n            chart.data = [\n                {\n                    category: 'Global Summary',\n                    first: globalSummary.TotalConfirmed,\n                    second: globalSummary.TotalRecovered,\n                    third: globalSummary.TotalDeaths\n                }\n            ]\n\n            // setting the three columns title\n            createSeries('first', 'Total Confirmed');\n            createSeries('second', 'Total Recovered');\n            createSeries('third', 'Total Deaths');\n\n            function arrangeColumns() {\n\n                let series = chart.series.getIndex(0);\n\n                let w = 1 - xAxis.renderer.cellStartLocation - (1 - xAxis.renderer.cellEndLocation);\n                if (series.dataItems.length > 1) {\n                    let x0 = xAxis.getX(series.dataItems.getIndex(0), \"categoryX\");\n                    let x1 = xAxis.getX(series.dataItems.getIndex(1), \"categoryX\");\n                    let delta = ((x1 - x0) / chart.series.length) * w;\n                    if (am4core.isNumber(delta)) {\n                        let middle = chart.series.length / 2;\n\n                        let newIndex = 0;\n                        chart.series.each(function(series) {\n                            if (!series.isHidden && !series.isHiding) {\n                                series.dummyData = newIndex;\n                                newIndex++;\n                            }\n                            else {\n                                series.dummyData = chart.series.indexOf(series);\n                            }\n                        })\n                        let visibleCount = newIndex;\n                        let newMiddle = visibleCount / 2;\n\n                        chart.series.each(function(series) {\n                            let trueIndex = chart.series.indexOf(series);\n                            let newIndex = series.dummyData;\n\n                            let dx = (newIndex - trueIndex + middle - newMiddle) * delta\n\n                            series.animate({ property: \"dx\", to: dx }, series.interpolationDuration, series.interpolationEasing);\n                            series.bulletsContainer.animate({ property: \"dx\", to: dx }, series.interpolationDuration, series.interpolationEasing);\n                        })\n                    }\n                }\n            }\n\n\n    }, [globalSummary]); // pass empty array to load the chart only once\n\n    return (\n        <React.Fragment>\n            <div className={`col-xl-${xl} col-lg-${md}`}>\n                <div className=\"card shadow mb-4 summary-xy-chart \">\n                {/* Card Header - Dropdown */}\n                <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\n                    <h6 className=\"m-0 font-weight-bold text-primary\">Covid19 Global Summary</h6>\n                </div>\n                {/* Card Body */}\n                <div className=\"card-body\">\n                    <div className=\"chart-area\">\n                        <div id=\"summary-chart-div\"></div>\n                    </div>\n                </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default SummaryXYChart;","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n// components\nimport Widget from '../components/Widget';\nimport SummaryXYChart from '../components/SummaryXYChart';\n\nconst SummaryWidgets = ({xl = 12, lg = 12}) => {\n    // summary api\n    const covic19SummaryApi = `https://api.covid19api.com/summary`;\n    // create state and mutator for the cases data\n    const [globalSummary, setGobalSummary] = useState(0);\n    useEffect(() => { \n        // get the data from the api\n        const getData = async () => {\n            const {data} = await axios.get(covic19SummaryApi);\n            // updateing the globalSummary data, to pass it into childrens\n            setGobalSummary(data.Global);\n        };\n        // calling the sync function\n        getData();\n    }\n    , []); // pass empty array to load the chart only once\n\n    return (\n        <React.Fragment>\n            <div className=\"row\">\n                <Widget xl={4} md={4} mb={4}  icon={'fas fa-asterisk'} label={'primary'}  value={(globalSummary.NewConfirmed)??0} title={'New Confirmed'} />\n                <Widget xl={4} md={4} mb={4}  icon={'fas fa-heart'} label={'success'}  value={(globalSummary.NewRecovered)??0} title={'New Recovered'} />\n                <Widget xl={4} md={4} mb={4}  icon={'fas fa-heart-broken'} label={'danger'}  value={(globalSummary.NewDeaths)??0} title={'New Deaths'} />\n            </div>\n            <div className=\"row\" style={{height:'650px'}}>\n                <SummaryXYChart xl={12} md={12} mb={12}  globalSummary={globalSummary} />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default SummaryWidgets;"],"sourceRoot":""}