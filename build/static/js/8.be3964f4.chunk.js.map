{"version":3,"sources":["components/AreaChart.js"],"names":["AreaChart","xl","lg","interval","useSelector","state","covic19CasesApi","useEffect","chart","am4core","am4charts","axios","get","then","data","graphData","casesInDate","cases","push","date","name","case","dateAxis","xAxes","renderer","minGridDistance","gridIntervals","setAll","timeUnit","count","yAxes","series","dataFields","valueY","dateX","tooltipText","strokeWidth","tooltip","pointerOrientation","cursor","snapToSeries","xAxis","scrollbarX","dispose","className","style","height","id","width"],"mappings":"wHAAA,uEAiGeA,UA3FG,SAAC,GAAwB,IAAD,IAAtBC,UAAsB,MAAjB,GAAiB,MAAbC,UAAa,MAAR,GAAQ,EAGhCC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,YAEtCG,EAAe,iEAA6DH,GAgElF,OA7DAI,qBAAU,WAGN,IAAMC,EAAQC,IAAe,WAAYC,KAkDzC,OAhDAC,IAAMC,IAAIN,GAAiBO,MAAK,YAAa,IAAXC,EAAU,EAAVA,KAE1BC,EAAY,GAGhB,IAAK,IAAMC,KAAeF,EAAKG,MAC3BF,EAAUG,KAAK,CACXC,KAAMH,EACNI,KAAM,QACNC,KAAMP,EAAKG,MAAMD,KAKzBR,EAAMM,KAAOC,EAGb,IAAIO,EAAWd,EAAMe,MAAML,KAAK,IAAIR,KACpCY,EAASE,SAASC,gBAAkB,IACpCH,EAASI,cAAcC,OAAO,CAC1B,CAAEC,SAAU,MAAOC,MAAO,GAC1B,CAAED,SAAU,QAASC,MAAO,MAIhCrB,EAAMsB,MAAMZ,KAAK,IAAIR,KAGrB,IAAIqB,EAASvB,EAAMuB,OAAOb,KAAK,IAAIR,KACnCqB,EAAOC,WAAWC,OAAS,OAC3BF,EAAOC,WAAWE,MAAQ,OAC1BH,EAAOI,YAAc,UACrBJ,EAAOK,YAAc,EAErBL,EAAOM,QAAQC,mBAAqB,WAEpC9B,EAAM+B,OAAS,IAAI7B,IACnBF,EAAM+B,OAAOC,aAAeT,EAC5BvB,EAAM+B,OAAOE,MAAQnB,EAGrB,IAAIoB,EAAa,IAAIhC,IACrBgC,EAAWX,OAAOb,KAAKa,GACvBvB,EAAMkC,WAAaA,KAKhB,WAEHlC,EAAMmC,aAIZ,CAACrC,IAGC,yBAAKsC,UAAU,MAAMC,MAAO,CAACC,OAAO,UAEhC,yBAAKF,UAAS,iBAAY3C,EAAZ,mBAAyBC,IACnC,yBAAK0C,UAAU,oCAEf,yBAAKA,UAAU,+EACX,wBAAIA,UAAU,qCAAd,2BAA2EzC,EAA3E,UAGJ,yBAAKyC,UAAU,aACX,yBAAKA,UAAU,cACX,yBAAKG,GAAG,WAAWF,MAAO,CAAEG,MAAO,OAAQF,OAAQ","file":"static/js/8.be3964f4.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useSelector } from 'react-redux'\nimport axios from 'axios';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\n\nconst AreaChart = ({xl = 12, lg = 12}) => {\n\n    // get interval state from redux \n    const interval = useSelector(state => state.interval);\n\n    const covic19CasesApi = `https://disease.sh/v3/covid-19/historical/all?lastdays=${interval}`;\n\n    // create state and mutator for the cases data\n    useEffect(() => { \n        \n        // creating the cart const\n        const chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n        // get the data from the api\n        axios.get(covic19CasesApi).then(({data}) => {\n\n            let graphData = [];\n\n            // looping over the cases object\n            for (const casesInDate in data.cases) {\n                graphData.push({ \n                    date: casesInDate,\n                    name: \"cases\",\n                    case: data.cases[casesInDate]\n                });\n            }\n\n            // push the data array into the graph \n            chart.data = graphData;\n\n            // Create axes\n            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n            dateAxis.renderer.minGridDistance = 120;\n            dateAxis.gridIntervals.setAll([\n                { timeUnit: \"day\", count: 1 }, // handle the minimize scale which is day (for smooth graph)\n                { timeUnit: \"month\", count: 0.5 } // handle the wanted scale which is months\n            ]);\n\n            // push the values axis into the y axis\n            chart.yAxes.push(new am4charts.ValueAxis());\n\n            // Create series\n            var series = chart.series.push(new am4charts.LineSeries());\n            series.dataFields.valueY = \"case\"; // set the value for the y axis\n            series.dataFields.dateX = \"date\";// set the date for the x axis\n            series.tooltipText = \"{value}\"\n            series.strokeWidth = 3;\n\n            series.tooltip.pointerOrientation = \"vertical\";\n\n            chart.cursor = new am4charts.XYCursor();\n            chart.cursor.snapToSeries = series;\n            chart.cursor.xAxis = dateAxis;\n\n            // adding XY chart scrollbar for zoomin-zoomout\n            let scrollbarX = new am4charts.XYChartScrollbar();\n            scrollbarX.series.push(series);\n            chart.scrollbarX = scrollbarX;\n\n        });\n\n\n        return () => {\n            // disponse the chart when the component is unmounted\n            chart.dispose();\n        };\n\n    }\n    , [covic19CasesApi]); // pass empty array to load the chart only once\n\n    return (\n        <div className=\"row\" style={{height:'650px'}}>\n            {/* Area Chart */}\n            <div className={`col-xl-${xl} col-lg-${lg}`}>\n                <div className=\"card shadow area-chart-card mb-4\">\n                {/* Card Header - Dropdown */}\n                <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\n                    <h6 className=\"m-0 font-weight-bold text-primary\">Covid19 cases evolve in {interval} days</h6>\n                </div>\n                {/* Card Body */}\n                <div className=\"card-body\">\n                    <div className=\"chart-area\">\n                        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n                    </div>\n                </div>\n                </div>\n            </div>\n        {/* Area Chart */}\n        </div>\n    );\n}\n\nexport default AreaChart;"],"sourceRoot":""}